// Q.1 Write a program that demonstrates the use of nice() system call. After a child process is started
// using fork(), assign higher priority to the child using nice() system call.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t child_pid;
    int nice_value = -10;  // A lower nice value means higher priority

    child_pid = fork();

    if (child_pid == 0) {
        // This code is executed by the child process
        printf("Child process (PID %d) is running with normal priority.\n", getpid());
    } else if (child_pid > 0) {
        // This code is executed by the parent process
        printf("Parent process (PID %d) is running with normal priority.\n", getpid());

        // Adjust the priority of the child process using nice()
        if (nice(nice_value) == -1) {
            perror("nice");
            exit(EXIT_FAILURE);
        }

        printf("Parent process has adjusted the child process's priority to be higher.\n");
    } else {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    // Add a sleep to keep the processes running for a while
    sleep(5);

    return 0;
}
// Q.2 Write the simulation program to implement demand paging and show the page scheduling
// and total number of page faults for the following given page reference string. Give input n=3 as
// the number of memory frames.
// Reference String :3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6
// Implement FIFO 

#include <stdio.h>

#define MAX_FRAMES 3

int main() {
    int referenceString[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int n = sizeof(referenceString) / sizeof(referenceString[0]);
    int memoryFrames[MAX_FRAMES];
    int pageFaults = 0;

    int frameIndex = 0;

    for (int i = 0; i < n; i++) {
        int page = referenceString[i];
        int pageFound = 0;

        // Check if the page is already in memory
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (memoryFrames[j] == page) {
                pageFound = 1;
                break;
            }
        }

        if (!pageFound) {
            // Page fault: page is not in memory
            pageFaults++;

            if (frameIndex < MAX_FRAMES) {
                // Memory is not full, add the page to an empty frame
                memoryFrames[frameIndex] = page;
                frameIndex++;
            } else {
                // Memory is full, replace the oldest page (FIFO)
                for (int j = 0; j < MAX_FRAMES - 1; j++) {
                    memoryFrames[j] = memoryFrames[j + 1];
                }
                memoryFrames[MAX_FRAMES - 1] = page;
            }
        }

        // Print the current state of memory frames
        printf("Page %d: [", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d", memoryFrames[j]);
            if (j < MAX_FRAMES - 1) {
                printf(", ");
            }
        }
        printf("]\n");
    }

    printf("Total page faults: %d\n", pageFaults);

    return 0;
}
